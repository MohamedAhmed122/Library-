in the searchview

const renderRecipe = recipe => {
    const markup = `
        <li>
            <a class="results__link" href="#${recipe.recipe_id}">
                <figure class="results__fig">
                    <img src="${recipe.image_url}" alt="${recipe.title}">
                </figure>
                <div class="results__data">
                    <h4 class="results__name">${limitRecipeTitle(recipe.title)}</h4>
                    <p class="results__author">${recipe.publisher}</p>
                </div>
            </a>
        </li>
    `;
    element.searchResultList.insertAdjacentHTML('beforeend', markup);
};

const createButton = (type, page) =>
    `<button class="btn-inline results__btn--${type}"  data-goto=${type === 'prev' ? page - 1 : page + 1}>
        <span>Page  ${type === 'prev' ? page - 1 : page + 1}</span>
        <svg class="search__icon">
             <use href="img/icons.svg#icon-triangle-${type === 'prev' ? 'left' : 'right'}"></use>
        </svg>
    </button>
`;


const renderButtons = (page, numOFResults, resPerPage) => {
    let button;
    const pages = Math.ceil(numOFResults / resPerPage)

    if (page === 1 && pages > 1) {
        //Only button for next
        button = createButton('next', page);
    } else if (page < pages) {
        // tow button next and Previous
        button = `${createButton('next', page)}
                  ${createButton('prev', page)}`
    } else if (pages === page && pages > 1) {
        //Only button for previous
        button = createButton('prev', page);
    }
    element.pageResult.insertAdjacentHTML('afterbegin', button);
}


export const renderResult = (recipes, page = 1, resPerPage = 10) => {
    // render results of currente page
    const start = (page - 1) * resPerPage;
    const end = page * resPerPage;

    recipes.slice(start, end).forEach(renderRecipe);

    // render pagination buttons
    renderButtons(page, recipes.length, resPerPage);

};

in the the module


